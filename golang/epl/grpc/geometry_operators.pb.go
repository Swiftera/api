// Code generated by protoc-gen-go. DO NOT EDIT.
// source: epl/grpc/geometry_operators.proto

package grpc // import "github.com/geo-grpc/api/golang/epl/grpc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import protobuf "github.com/geo-grpc/api/golang/epl/protobuf"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GeometryServiceClient is the client API for GeometryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GeometryServiceClient interface {
	// Execute a single blocking geometry operation
	GeometryOperationUnary(ctx context.Context, in *protobuf.GeometryRequest, opts ...grpc.CallOption) (*protobuf.GeometryResponse, error)
	// stream in operator requests and get back a stream of results
	GeometryOperationBiStream(ctx context.Context, opts ...grpc.CallOption) (GeometryService_GeometryOperationBiStreamClient, error)
	// manual flow control bi-directional stream. example
	// go shouldn't use this because of https://groups.google.com/forum/#!topic/grpc-io/6_B46Oszb4k ?
	GeometryOperationBiStreamFlow(ctx context.Context, opts ...grpc.CallOption) (GeometryService_GeometryOperationBiStreamFlowClient, error)
	// stream in file chunks for a geometry file type and stream back results for each geometry encountered
	FileOperationBiStreamFlow(ctx context.Context, opts ...grpc.CallOption) (GeometryService_FileOperationBiStreamFlowClient, error)
}

type geometryServiceClient struct {
	cc *grpc.ClientConn
}

func NewGeometryServiceClient(cc *grpc.ClientConn) GeometryServiceClient {
	return &geometryServiceClient{cc}
}

func (c *geometryServiceClient) GeometryOperationUnary(ctx context.Context, in *protobuf.GeometryRequest, opts ...grpc.CallOption) (*protobuf.GeometryResponse, error) {
	out := new(protobuf.GeometryResponse)
	err := c.cc.Invoke(ctx, "/epl.grpc.GeometryService/GeometryOperationUnary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geometryServiceClient) GeometryOperationBiStream(ctx context.Context, opts ...grpc.CallOption) (GeometryService_GeometryOperationBiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GeometryService_serviceDesc.Streams[0], "/epl.grpc.GeometryService/GeometryOperationBiStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &geometryServiceGeometryOperationBiStreamClient{stream}
	return x, nil
}

type GeometryService_GeometryOperationBiStreamClient interface {
	Send(*protobuf.GeometryRequest) error
	Recv() (*protobuf.GeometryResponse, error)
	grpc.ClientStream
}

type geometryServiceGeometryOperationBiStreamClient struct {
	grpc.ClientStream
}

func (x *geometryServiceGeometryOperationBiStreamClient) Send(m *protobuf.GeometryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *geometryServiceGeometryOperationBiStreamClient) Recv() (*protobuf.GeometryResponse, error) {
	m := new(protobuf.GeometryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *geometryServiceClient) GeometryOperationBiStreamFlow(ctx context.Context, opts ...grpc.CallOption) (GeometryService_GeometryOperationBiStreamFlowClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GeometryService_serviceDesc.Streams[1], "/epl.grpc.GeometryService/GeometryOperationBiStreamFlow", opts...)
	if err != nil {
		return nil, err
	}
	x := &geometryServiceGeometryOperationBiStreamFlowClient{stream}
	return x, nil
}

type GeometryService_GeometryOperationBiStreamFlowClient interface {
	Send(*protobuf.GeometryRequest) error
	Recv() (*protobuf.GeometryResponse, error)
	grpc.ClientStream
}

type geometryServiceGeometryOperationBiStreamFlowClient struct {
	grpc.ClientStream
}

func (x *geometryServiceGeometryOperationBiStreamFlowClient) Send(m *protobuf.GeometryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *geometryServiceGeometryOperationBiStreamFlowClient) Recv() (*protobuf.GeometryResponse, error) {
	m := new(protobuf.GeometryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *geometryServiceClient) FileOperationBiStreamFlow(ctx context.Context, opts ...grpc.CallOption) (GeometryService_FileOperationBiStreamFlowClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GeometryService_serviceDesc.Streams[2], "/epl.grpc.GeometryService/FileOperationBiStreamFlow", opts...)
	if err != nil {
		return nil, err
	}
	x := &geometryServiceFileOperationBiStreamFlowClient{stream}
	return x, nil
}

type GeometryService_FileOperationBiStreamFlowClient interface {
	Send(*protobuf.FileRequestChunk) error
	Recv() (*protobuf.GeometryResponse, error)
	grpc.ClientStream
}

type geometryServiceFileOperationBiStreamFlowClient struct {
	grpc.ClientStream
}

func (x *geometryServiceFileOperationBiStreamFlowClient) Send(m *protobuf.FileRequestChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *geometryServiceFileOperationBiStreamFlowClient) Recv() (*protobuf.GeometryResponse, error) {
	m := new(protobuf.GeometryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GeometryServiceServer is the server API for GeometryService service.
type GeometryServiceServer interface {
	// Execute a single blocking geometry operation
	GeometryOperationUnary(context.Context, *protobuf.GeometryRequest) (*protobuf.GeometryResponse, error)
	// stream in operator requests and get back a stream of results
	GeometryOperationBiStream(GeometryService_GeometryOperationBiStreamServer) error
	// manual flow control bi-directional stream. example
	// go shouldn't use this because of https://groups.google.com/forum/#!topic/grpc-io/6_B46Oszb4k ?
	GeometryOperationBiStreamFlow(GeometryService_GeometryOperationBiStreamFlowServer) error
	// stream in file chunks for a geometry file type and stream back results for each geometry encountered
	FileOperationBiStreamFlow(GeometryService_FileOperationBiStreamFlowServer) error
}

func RegisterGeometryServiceServer(s *grpc.Server, srv GeometryServiceServer) {
	s.RegisterService(&_GeometryService_serviceDesc, srv)
}

func _GeometryService_GeometryOperationUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.GeometryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeometryServiceServer).GeometryOperationUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epl.grpc.GeometryService/GeometryOperationUnary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeometryServiceServer).GeometryOperationUnary(ctx, req.(*protobuf.GeometryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeometryService_GeometryOperationBiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GeometryServiceServer).GeometryOperationBiStream(&geometryServiceGeometryOperationBiStreamServer{stream})
}

type GeometryService_GeometryOperationBiStreamServer interface {
	Send(*protobuf.GeometryResponse) error
	Recv() (*protobuf.GeometryRequest, error)
	grpc.ServerStream
}

type geometryServiceGeometryOperationBiStreamServer struct {
	grpc.ServerStream
}

func (x *geometryServiceGeometryOperationBiStreamServer) Send(m *protobuf.GeometryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *geometryServiceGeometryOperationBiStreamServer) Recv() (*protobuf.GeometryRequest, error) {
	m := new(protobuf.GeometryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GeometryService_GeometryOperationBiStreamFlow_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GeometryServiceServer).GeometryOperationBiStreamFlow(&geometryServiceGeometryOperationBiStreamFlowServer{stream})
}

type GeometryService_GeometryOperationBiStreamFlowServer interface {
	Send(*protobuf.GeometryResponse) error
	Recv() (*protobuf.GeometryRequest, error)
	grpc.ServerStream
}

type geometryServiceGeometryOperationBiStreamFlowServer struct {
	grpc.ServerStream
}

func (x *geometryServiceGeometryOperationBiStreamFlowServer) Send(m *protobuf.GeometryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *geometryServiceGeometryOperationBiStreamFlowServer) Recv() (*protobuf.GeometryRequest, error) {
	m := new(protobuf.GeometryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GeometryService_FileOperationBiStreamFlow_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GeometryServiceServer).FileOperationBiStreamFlow(&geometryServiceFileOperationBiStreamFlowServer{stream})
}

type GeometryService_FileOperationBiStreamFlowServer interface {
	Send(*protobuf.GeometryResponse) error
	Recv() (*protobuf.FileRequestChunk, error)
	grpc.ServerStream
}

type geometryServiceFileOperationBiStreamFlowServer struct {
	grpc.ServerStream
}

func (x *geometryServiceFileOperationBiStreamFlowServer) Send(m *protobuf.GeometryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *geometryServiceFileOperationBiStreamFlowServer) Recv() (*protobuf.FileRequestChunk, error) {
	m := new(protobuf.FileRequestChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GeometryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "epl.grpc.GeometryService",
	HandlerType: (*GeometryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GeometryOperationUnary",
			Handler:    _GeometryService_GeometryOperationUnary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GeometryOperationBiStream",
			Handler:       _GeometryService_GeometryOperationBiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GeometryOperationBiStreamFlow",
			Handler:       _GeometryService_GeometryOperationBiStreamFlow_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "FileOperationBiStreamFlow",
			Handler:       _GeometryService_FileOperationBiStreamFlow_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "epl/grpc/geometry_operators.proto",
}

func init() {
	proto.RegisterFile("epl/grpc/geometry_operators.proto", fileDescriptor_geometry_operators_ea464ca759134346)
}

var fileDescriptor_geometry_operators_ea464ca759134346 = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4c, 0x2d, 0xc8, 0xd1,
	0x4f, 0x2f, 0x2a, 0x48, 0xd6, 0x4f, 0x4f, 0xcd, 0xcf, 0x4d, 0x2d, 0x29, 0xaa, 0x8c, 0xcf, 0x2f,
	0x48, 0x2d, 0x4a, 0x2c, 0xc9, 0x2f, 0x2a, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x48,
	0x2d, 0xc8, 0xd1, 0x03, 0x29, 0x91, 0x92, 0x06, 0x29, 0x06, 0x0b, 0x26, 0x95, 0xa6, 0xc1, 0x35,
	0x40, 0x94, 0x19, 0x4d, 0x67, 0xe6, 0xe2, 0x77, 0x87, 0x0a, 0x05, 0xa7, 0x16, 0x95, 0x65, 0x26,
	0xa7, 0x0a, 0x45, 0x72, 0x89, 0xc1, 0x84, 0xfc, 0xc1, 0xa6, 0x66, 0xe6, 0xe7, 0x85, 0xe6, 0x25,
	0x16, 0x55, 0x0a, 0xc9, 0xea, 0x81, 0x4c, 0x85, 0x99, 0xa5, 0x07, 0x53, 0x15, 0x94, 0x5a, 0x58,
	0x9a, 0x5a, 0x5c, 0x22, 0x25, 0x87, 0x4b, 0xba, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55, 0x89, 0x41,
	0x28, 0x81, 0x4b, 0x12, 0xc3, 0x68, 0xa7, 0xcc, 0xe0, 0x92, 0xa2, 0xd4, 0xc4, 0x5c, 0x8a, 0x4d,
	0xd7, 0x60, 0x34, 0x60, 0x14, 0x4a, 0xe1, 0x92, 0xc5, 0x69, 0x83, 0x5b, 0x4e, 0x7e, 0x39, 0x75,
	0x6c, 0x49, 0xe4, 0x92, 0x74, 0xcb, 0xcc, 0x49, 0xc5, 0x6e, 0x03, 0x9a, 0x11, 0x20, 0x85, 0x50,
	0xd3, 0x9d, 0x33, 0x4a, 0xf3, 0xb2, 0x89, 0xb3, 0xc2, 0x29, 0x94, 0x8b, 0x27, 0x39, 0x3f, 0x57,
	0x0f, 0x16, 0x8d, 0x4e, 0x22, 0x68, 0xd1, 0x14, 0x00, 0xd2, 0x1f, 0xc0, 0x18, 0xa5, 0x9e, 0x9e,
	0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0x0b, 0x8a, 0x5c, 0x5d, 0x70, 0xb2, 0x48, 0x2c,
	0xc8, 0xd4, 0x4f, 0xcf, 0xcf, 0x49, 0xcc, 0x4b, 0xd7, 0x87, 0x25, 0x95, 0x45, 0x4c, 0xcc, 0xee,
	0xbe, 0xc1, 0x49, 0x6c, 0x60, 0x7b, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x07, 0xac, 0x4f,
	0x10, 0x43, 0x02, 0x00, 0x00,
}
