// Code generated by protoc-gen-go. DO NOT EDIT.
// source: epl/grpc/stac_operators.proto

package grpc // import "github.com/geo-grpc/api/golang/epl/grpc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import protobuf "github.com/geo-grpc/api/golang/epl/protobuf"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MetadataOperatorsClient is the client API for MetadataOperators service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MetadataOperatorsClient interface {
	Search(ctx context.Context, in *protobuf.MetadataRequest, opts ...grpc.CallOption) (MetadataOperators_SearchClient, error)
	Insert(ctx context.Context, in *protobuf.StacMetadata, opts ...grpc.CallOption) (*protobuf.DBResult, error)
}

type metadataOperatorsClient struct {
	cc *grpc.ClientConn
}

func NewMetadataOperatorsClient(cc *grpc.ClientConn) MetadataOperatorsClient {
	return &metadataOperatorsClient{cc}
}

func (c *metadataOperatorsClient) Search(ctx context.Context, in *protobuf.MetadataRequest, opts ...grpc.CallOption) (MetadataOperators_SearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MetadataOperators_serviceDesc.Streams[0], "/epl.grpc.MetadataOperators/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &metadataOperatorsSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MetadataOperators_SearchClient interface {
	Recv() (*protobuf.StacMetadata, error)
	grpc.ClientStream
}

type metadataOperatorsSearchClient struct {
	grpc.ClientStream
}

func (x *metadataOperatorsSearchClient) Recv() (*protobuf.StacMetadata, error) {
	m := new(protobuf.StacMetadata)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metadataOperatorsClient) Insert(ctx context.Context, in *protobuf.StacMetadata, opts ...grpc.CallOption) (*protobuf.DBResult, error) {
	out := new(protobuf.DBResult)
	err := c.cc.Invoke(ctx, "/epl.grpc.MetadataOperators/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetadataOperatorsServer is the server API for MetadataOperators service.
type MetadataOperatorsServer interface {
	Search(*protobuf.MetadataRequest, MetadataOperators_SearchServer) error
	Insert(context.Context, *protobuf.StacMetadata) (*protobuf.DBResult, error)
}

func RegisterMetadataOperatorsServer(s *grpc.Server, srv MetadataOperatorsServer) {
	s.RegisterService(&_MetadataOperators_serviceDesc, srv)
}

func _MetadataOperators_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(protobuf.MetadataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetadataOperatorsServer).Search(m, &metadataOperatorsSearchServer{stream})
}

type MetadataOperators_SearchServer interface {
	Send(*protobuf.StacMetadata) error
	grpc.ServerStream
}

type metadataOperatorsSearchServer struct {
	grpc.ServerStream
}

func (x *metadataOperatorsSearchServer) Send(m *protobuf.StacMetadata) error {
	return x.ServerStream.SendMsg(m)
}

func _MetadataOperators_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.StacMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataOperatorsServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/epl.grpc.MetadataOperators/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataOperatorsServer).Insert(ctx, req.(*protobuf.StacMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

var _MetadataOperators_serviceDesc = grpc.ServiceDesc{
	ServiceName: "epl.grpc.MetadataOperators",
	HandlerType: (*MetadataOperatorsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Insert",
			Handler:    _MetadataOperators_Insert_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Search",
			Handler:       _MetadataOperators_Search_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "epl/grpc/stac_operators.proto",
}

func init() {
	proto.RegisterFile("epl/grpc/stac_operators.proto", fileDescriptor_stac_operators_0867c4cc25eeb1c7)
}

var fileDescriptor_stac_operators_0867c4cc25eeb1c7 = []byte{
	// 200 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0xd0, 0x31, 0x4b, 0xc5, 0x30,
	0x10, 0x07, 0xf0, 0x76, 0x29, 0x92, 0xcd, 0x0c, 0x0a, 0x81, 0x2e, 0x5d, 0xc4, 0xc1, 0x44, 0x74,
	0x77, 0x28, 0x82, 0x38, 0x88, 0xd0, 0x6e, 0x2e, 0x72, 0x8d, 0x67, 0x5a, 0xc8, 0x6b, 0xf2, 0x92,
	0xcb, 0xb7, 0x79, 0x1f, 0xf6, 0xd1, 0x3c, 0x32, 0x74, 0x79, 0xeb, 0xfd, 0x7f, 0xff, 0x83, 0x3b,
	0xd6, 0xa2, 0xb7, 0xca, 0x04, 0xaf, 0x55, 0x24, 0xd0, 0xbf, 0xce, 0x63, 0x00, 0x72, 0x21, 0x4a,
	0x1f, 0x1c, 0x39, 0x7e, 0x83, 0xde, 0xca, 0x2d, 0x16, 0xf7, 0x1b, 0xcc, 0xc3, 0x29, 0xfd, 0x67,
	0x7c, 0x21, 0x2f, 0xa7, 0x9a, 0xdd, 0x7e, 0x21, 0xc1, 0x1f, 0x10, 0x7c, 0x97, 0x3a, 0xff, 0x60,
	0xcd, 0x88, 0x10, 0xf4, 0xcc, 0x5b, 0xb9, 0xed, 0x28, 0x4d, 0x59, 0xe8, 0x80, 0xc7, 0x84, 0x91,
	0x84, 0xd8, 0xc7, 0x23, 0x81, 0x2e, 0xa4, 0xab, 0x9e, 0x6b, 0xfe, 0xc6, 0x9a, 0xcf, 0x35, 0x62,
	0x20, 0x7e, 0x45, 0x8a, 0xbb, 0x7d, 0xf6, 0xde, 0x0f, 0x18, 0x93, 0xa5, 0xae, 0xea, 0x1f, 0x7f,
	0x1e, 0xcc, 0x42, 0x73, 0x9a, 0xa4, 0x76, 0x07, 0x65, 0xd0, 0x3d, 0xe5, 0x6b, 0xc1, 0x2f, 0xca,
	0x38, 0x0b, 0xab, 0x51, 0xe5, 0x03, 0x53, 0x93, 0xfb, 0xaf, 0xe7, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xae, 0xe4, 0x5e, 0xa0, 0x14, 0x01, 0x00, 0x00,
}
