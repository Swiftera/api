// Code generated by protoc-gen-go. DO NOT EDIT.
// source: epl/protobuf/stac.proto

package protobuf // import "github.com/geo-grpc/api/golang/epl/protobuf"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import any "github.com/golang/protobuf/ptypes/any"
import duration "github.com/golang/protobuf/ptypes/duration"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"
import wrappers "github.com/golang/protobuf/ptypes/wrappers"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EO_PLATFORM int32

const (
	EO_PLATFORM_UNKNOWN_PLATFORM EO_PLATFORM = 0
	EO_PLATFORM_LANDSAT_8        EO_PLATFORM = 1
	EO_PLATFORM_NAIP             EO_PLATFORM = 2
)

var EO_PLATFORM_name = map[int32]string{
	0: "UNKNOWN_PLATFORM",
	1: "LANDSAT_8",
	2: "NAIP",
}
var EO_PLATFORM_value = map[string]int32{
	"UNKNOWN_PLATFORM": 0,
	"LANDSAT_8":        1,
	"NAIP":             2,
}

func (x EO_PLATFORM) String() string {
	return proto.EnumName(EO_PLATFORM_name, int32(x))
}
func (EO_PLATFORM) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_stac_52cae837e688895f, []int{0}
}

type EO_INSTRUMENT int32

const (
	EO_INSTRUMENT_UNKNOWN_INSTRUMENT EO_INSTRUMENT = 0
)

var EO_INSTRUMENT_name = map[int32]string{
	0: "UNKNOWN_INSTRUMENT",
}
var EO_INSTRUMENT_value = map[string]int32{
	"UNKNOWN_INSTRUMENT": 0,
}

func (x EO_INSTRUMENT) String() string {
	return proto.EnumName(EO_INSTRUMENT_name, int32(x))
}
func (EO_INSTRUMENT) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_stac_52cae837e688895f, []int{1}
}

type EO_BAND int32

const (
	EO_BAND_UNKNOWN_BAND       EO_BAND = 0
	EO_BAND_COASTAL_BAND       EO_BAND = 2
	EO_BAND_BLUE_BAND          EO_BAND = 4
	EO_BAND_GREEN_BAND         EO_BAND = 8
	EO_BAND_RED_BAND           EO_BAND = 16
	EO_BAND_RGB_BANDS          EO_BAND = 28
	EO_BAND_NEAR_INFRARED_BAND EO_BAND = 32
	EO_BAND_RGBIR_BANDS        EO_BAND = 60
	EO_BAND_SWIR_16_BAND       EO_BAND = 64
	EO_BAND_SWIR_22_BAND       EO_BAND = 128
	EO_BAND_PANCHROMATIC_BAND  EO_BAND = 256
	EO_BAND_CIRRUS_BAND        EO_BAND = 512
	EO_BAND_LWIR_11_BAND       EO_BAND = 1024
	EO_BAND_LWIR_12_BAND       EO_BAND = 2048
)

var EO_BAND_name = map[int32]string{
	0:    "UNKNOWN_BAND",
	2:    "COASTAL_BAND",
	4:    "BLUE_BAND",
	8:    "GREEN_BAND",
	16:   "RED_BAND",
	28:   "RGB_BANDS",
	32:   "NEAR_INFRARED_BAND",
	60:   "RGBIR_BANDS",
	64:   "SWIR_16_BAND",
	128:  "SWIR_22_BAND",
	256:  "PANCHROMATIC_BAND",
	512:  "CIRRUS_BAND",
	1024: "LWIR_11_BAND",
	2048: "LWIR_12_BAND",
}
var EO_BAND_value = map[string]int32{
	"UNKNOWN_BAND":       0,
	"COASTAL_BAND":       2,
	"BLUE_BAND":          4,
	"GREEN_BAND":         8,
	"RED_BAND":           16,
	"RGB_BANDS":          28,
	"NEAR_INFRARED_BAND": 32,
	"RGBIR_BANDS":        60,
	"SWIR_16_BAND":       64,
	"SWIR_22_BAND":       128,
	"PANCHROMATIC_BAND":  256,
	"CIRRUS_BAND":        512,
	"LWIR_11_BAND":       1024,
	"LWIR_12_BAND":       2048,
}

func (x EO_BAND) String() string {
	return proto.EnumName(EO_BAND_name, int32(x))
}
func (EO_BAND) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_stac_52cae837e688895f, []int{2}
}

type ASSET_TYPE int32

const (
	ASSET_TYPE_UNKNOWN_ASSET ASSET_TYPE = 0
	ASSET_TYPE_JPEG          ASSET_TYPE = 1
	ASSET_TYPE_GEOTIFF       ASSET_TYPE = 2
	ASSET_TYPE_LERC          ASSET_TYPE = 3
	ASSET_TYPE_MRF           ASSET_TYPE = 4
	ASSET_TYPE_MRF_IDX       ASSET_TYPE = 5
	ASSET_TYPE_MRF_XML       ASSET_TYPE = 6
)

var ASSET_TYPE_name = map[int32]string{
	0: "UNKNOWN_ASSET",
	1: "JPEG",
	2: "GEOTIFF",
	3: "LERC",
	4: "MRF",
	5: "MRF_IDX",
	6: "MRF_XML",
}
var ASSET_TYPE_value = map[string]int32{
	"UNKNOWN_ASSET": 0,
	"JPEG":          1,
	"GEOTIFF":       2,
	"LERC":          3,
	"MRF":           4,
	"MRF_IDX":       5,
	"MRF_XML":       6,
}

func (x ASSET_TYPE) String() string {
	return proto.EnumName(ASSET_TYPE_name, int32(x))
}
func (ASSET_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_stac_52cae837e688895f, []int{3}
}

type IAAS int32

const (
	IAAS_UNKNOWN_IAAS IAAS = 0
	IAAS_AWS          IAAS = 1
	IAAS_GCP          IAAS = 2
	IAAS_AZURE        IAAS = 3
)

var IAAS_name = map[int32]string{
	0: "UNKNOWN_IAAS",
	1: "AWS",
	2: "GCP",
	3: "AZURE",
}
var IAAS_value = map[string]int32{
	"UNKNOWN_IAAS": 0,
	"AWS":          1,
	"GCP":          2,
	"AZURE":        3,
}

func (x IAAS) String() string {
	return proto.EnumName(IAAS_name, int32(x))
}
func (IAAS) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_stac_52cae837e688895f, []int{4}
}

type StacSearchRequest struct {
	Id                *StringField `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Limit             uint32       `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset            uint64       `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	PropertiesRequest *any.Any     `protobuf:"bytes,8,opt,name=properties_request,json=propertiesRequest,proto3" json:"properties_request,omitempty"`
	EoRequest         *EORequest   `protobuf:"bytes,9,opt,name=eo_request,json=eoRequest,proto3" json:"eo_request,omitempty"`
	//    oneof
	Bbox                 *EnvelopeData    `protobuf:"bytes,14,opt,name=bbox,proto3" json:"bbox,omitempty"`
	Geometry             *GeometryData    `protobuf:"bytes,15,opt,name=geometry,proto3" json:"geometry,omitempty"`
	GeometryRequest      *GeometryRequest `protobuf:"bytes,16,opt,name=geometry_request,json=geometryRequest,proto3" json:"geometry_request,omitempty"`
	Datetime             *TimestampField  `protobuf:"bytes,18,opt,name=datetime,proto3" json:"datetime,omitempty"`
	Observed             *TimestampField  `protobuf:"bytes,19,opt,name=observed,proto3" json:"observed,omitempty"`
	Updated              *TimestampField  `protobuf:"bytes,20,opt,name=updated,proto3" json:"updated,omitempty"`
	SrcImgDate           *TimestampField  `protobuf:"bytes,201,opt,name=src_img_date,json=srcImgDate,proto3" json:"src_img_date,omitempty"`
	Usgsid               *StringField     `protobuf:"bytes,202,opt,name=usgsid,proto3" json:"usgsid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *StacSearchRequest) Reset()         { *m = StacSearchRequest{} }
func (m *StacSearchRequest) String() string { return proto.CompactTextString(m) }
func (*StacSearchRequest) ProtoMessage()    {}
func (*StacSearchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_stac_52cae837e688895f, []int{0}
}
func (m *StacSearchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StacSearchRequest.Unmarshal(m, b)
}
func (m *StacSearchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StacSearchRequest.Marshal(b, m, deterministic)
}
func (dst *StacSearchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StacSearchRequest.Merge(dst, src)
}
func (m *StacSearchRequest) XXX_Size() int {
	return xxx_messageInfo_StacSearchRequest.Size(m)
}
func (m *StacSearchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StacSearchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StacSearchRequest proto.InternalMessageInfo

func (m *StacSearchRequest) GetId() *StringField {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *StacSearchRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *StacSearchRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *StacSearchRequest) GetPropertiesRequest() *any.Any {
	if m != nil {
		return m.PropertiesRequest
	}
	return nil
}

func (m *StacSearchRequest) GetEoRequest() *EORequest {
	if m != nil {
		return m.EoRequest
	}
	return nil
}

func (m *StacSearchRequest) GetBbox() *EnvelopeData {
	if m != nil {
		return m.Bbox
	}
	return nil
}

func (m *StacSearchRequest) GetGeometry() *GeometryData {
	if m != nil {
		return m.Geometry
	}
	return nil
}

func (m *StacSearchRequest) GetGeometryRequest() *GeometryRequest {
	if m != nil {
		return m.GeometryRequest
	}
	return nil
}

func (m *StacSearchRequest) GetDatetime() *TimestampField {
	if m != nil {
		return m.Datetime
	}
	return nil
}

func (m *StacSearchRequest) GetObserved() *TimestampField {
	if m != nil {
		return m.Observed
	}
	return nil
}

func (m *StacSearchRequest) GetUpdated() *TimestampField {
	if m != nil {
		return m.Updated
	}
	return nil
}

func (m *StacSearchRequest) GetSrcImgDate() *TimestampField {
	if m != nil {
		return m.SrcImgDate
	}
	return nil
}

func (m *StacSearchRequest) GetUsgsid() *StringField {
	if m != nil {
		return m.Usgsid
	}
	return nil
}

type EORequest struct {
	EoSunAzimuth         *FloatField `protobuf:"bytes,8,opt,name=eo_sun_azimuth,json=eoSunAzimuth,proto3" json:"eo_sun_azimuth,omitempty"`
	EoSunElevation       *FloatField `protobuf:"bytes,9,opt,name=eo_sun_elevation,json=eoSunElevation,proto3" json:"eo_sun_elevation,omitempty"`
	EoGsd                *FloatField `protobuf:"bytes,10,opt,name=eo_gsd,json=eoGsd,proto3" json:"eo_gsd,omitempty"`
	EoOffNadir           *FloatField `protobuf:"bytes,11,opt,name=eo_off_nadir,json=eoOffNadir,proto3" json:"eo_off_nadir,omitempty"`
	EoAzimuth            *FloatField `protobuf:"bytes,12,opt,name=eo_azimuth,json=eoAzimuth,proto3" json:"eo_azimuth,omitempty"`
	EoCloudCover         *FloatField `protobuf:"bytes,13,opt,name=eo_cloud_cover,json=eoCloudCover,proto3" json:"eo_cloud_cover,omitempty"`
	EoBands              EO_BAND     `protobuf:"varint,17,opt,name=eo_bands,json=eoBands,proto3,enum=epl.protobuf.EO_BAND" json:"eo_bands,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *EORequest) Reset()         { *m = EORequest{} }
func (m *EORequest) String() string { return proto.CompactTextString(m) }
func (*EORequest) ProtoMessage()    {}
func (*EORequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_stac_52cae837e688895f, []int{1}
}
func (m *EORequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EORequest.Unmarshal(m, b)
}
func (m *EORequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EORequest.Marshal(b, m, deterministic)
}
func (dst *EORequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EORequest.Merge(dst, src)
}
func (m *EORequest) XXX_Size() int {
	return xxx_messageInfo_EORequest.Size(m)
}
func (m *EORequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EORequest.DiscardUnknown(m)
}

var xxx_messageInfo_EORequest proto.InternalMessageInfo

func (m *EORequest) GetEoSunAzimuth() *FloatField {
	if m != nil {
		return m.EoSunAzimuth
	}
	return nil
}

func (m *EORequest) GetEoSunElevation() *FloatField {
	if m != nil {
		return m.EoSunElevation
	}
	return nil
}

func (m *EORequest) GetEoGsd() *FloatField {
	if m != nil {
		return m.EoGsd
	}
	return nil
}

func (m *EORequest) GetEoOffNadir() *FloatField {
	if m != nil {
		return m.EoOffNadir
	}
	return nil
}

func (m *EORequest) GetEoAzimuth() *FloatField {
	if m != nil {
		return m.EoAzimuth
	}
	return nil
}

func (m *EORequest) GetEoCloudCover() *FloatField {
	if m != nil {
		return m.EoCloudCover
	}
	return nil
}

func (m *EORequest) GetEoBands() EO_BAND {
	if m != nil {
		return m.EoBands
	}
	return EO_BAND_UNKNOWN_BAND
}

// Right now this isn't included in the response as it's a bit messy
type BandDetails struct {
	Name                 string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CommonName           string               `protobuf:"bytes,2,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	Description          string               `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Gsd                  *wrappers.FloatValue `protobuf:"bytes,4,opt,name=gsd,proto3" json:"gsd,omitempty"`
	Accuracy             *wrappers.FloatValue `protobuf:"bytes,5,opt,name=accuracy,proto3" json:"accuracy,omitempty"`
	CenterWavelength     *wrappers.FloatValue `protobuf:"bytes,6,opt,name=center_wavelength,json=centerWavelength,proto3" json:"center_wavelength,omitempty"`
	FullWidthHalfMax     *wrappers.FloatValue `protobuf:"bytes,7,opt,name=full_width_half_max,json=fullWidthHalfMax,proto3" json:"full_width_half_max,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *BandDetails) Reset()         { *m = BandDetails{} }
func (m *BandDetails) String() string { return proto.CompactTextString(m) }
func (*BandDetails) ProtoMessage()    {}
func (*BandDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_stac_52cae837e688895f, []int{2}
}
func (m *BandDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BandDetails.Unmarshal(m, b)
}
func (m *BandDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BandDetails.Marshal(b, m, deterministic)
}
func (dst *BandDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BandDetails.Merge(dst, src)
}
func (m *BandDetails) XXX_Size() int {
	return xxx_messageInfo_BandDetails.Size(m)
}
func (m *BandDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_BandDetails.DiscardUnknown(m)
}

var xxx_messageInfo_BandDetails proto.InternalMessageInfo

func (m *BandDetails) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BandDetails) GetCommonName() string {
	if m != nil {
		return m.CommonName
	}
	return ""
}

func (m *BandDetails) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *BandDetails) GetGsd() *wrappers.FloatValue {
	if m != nil {
		return m.Gsd
	}
	return nil
}

func (m *BandDetails) GetAccuracy() *wrappers.FloatValue {
	if m != nil {
		return m.Accuracy
	}
	return nil
}

func (m *BandDetails) GetCenterWavelength() *wrappers.FloatValue {
	if m != nil {
		return m.CenterWavelength
	}
	return nil
}

func (m *BandDetails) GetFullWidthHalfMax() *wrappers.FloatValue {
	if m != nil {
		return m.FullWidthHalfMax
	}
	return nil
}

type Asset struct {
	Href                 string     `protobuf:"bytes,1,opt,name=href,proto3" json:"href,omitempty"`
	AssetType            ASSET_TYPE `protobuf:"varint,2,opt,name=asset_type,json=assetType,proto3,enum=epl.protobuf.ASSET_TYPE" json:"asset_type,omitempty"`
	EoBand               EO_BAND    `protobuf:"varint,3,opt,name=eo_band,json=eoBand,proto3,enum=epl.protobuf.EO_BAND" json:"eo_band,omitempty"`
	BucketIaasHost       IAAS       `protobuf:"varint,4,opt,name=bucket_iaas_host,json=bucketIaasHost,proto3,enum=epl.protobuf.IAAS" json:"bucket_iaas_host,omitempty"`
	BucketOwner          string     `protobuf:"bytes,5,opt,name=bucket_owner,json=bucketOwner,proto3" json:"bucket_owner,omitempty"`
	BucketRegion         string     `protobuf:"bytes,6,opt,name=bucket_region,json=bucketRegion,proto3" json:"bucket_region,omitempty"`
	BucketRef            string     `protobuf:"bytes,7,opt,name=bucket_ref,json=bucketRef,proto3" json:"bucket_ref,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Asset) Reset()         { *m = Asset{} }
func (m *Asset) String() string { return proto.CompactTextString(m) }
func (*Asset) ProtoMessage()    {}
func (*Asset) Descriptor() ([]byte, []int) {
	return fileDescriptor_stac_52cae837e688895f, []int{3}
}
func (m *Asset) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Asset.Unmarshal(m, b)
}
func (m *Asset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Asset.Marshal(b, m, deterministic)
}
func (dst *Asset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Asset.Merge(dst, src)
}
func (m *Asset) XXX_Size() int {
	return xxx_messageInfo_Asset.Size(m)
}
func (m *Asset) XXX_DiscardUnknown() {
	xxx_messageInfo_Asset.DiscardUnknown(m)
}

var xxx_messageInfo_Asset proto.InternalMessageInfo

func (m *Asset) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *Asset) GetAssetType() ASSET_TYPE {
	if m != nil {
		return m.AssetType
	}
	return ASSET_TYPE_UNKNOWN_ASSET
}

func (m *Asset) GetEoBand() EO_BAND {
	if m != nil {
		return m.EoBand
	}
	return EO_BAND_UNKNOWN_BAND
}

func (m *Asset) GetBucketIaasHost() IAAS {
	if m != nil {
		return m.BucketIaasHost
	}
	return IAAS_UNKNOWN_IAAS
}

func (m *Asset) GetBucketOwner() string {
	if m != nil {
		return m.BucketOwner
	}
	return ""
}

func (m *Asset) GetBucketRegion() string {
	if m != nil {
		return m.BucketRegion
	}
	return ""
}

func (m *Asset) GetBucketRef() string {
	if m != nil {
		return m.BucketRef
	}
	return ""
}

type StacMetadata struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 'type" ignored as this isn't geojson
	Geometry             *GeometryData        `protobuf:"bytes,3,opt,name=geometry,proto3" json:"geometry,omitempty"`
	Bbox                 *EnvelopeData        `protobuf:"bytes,4,opt,name=bbox,proto3" json:"bbox,omitempty"`
	Properties           *any.Any             `protobuf:"bytes,5,opt,name=properties,proto3" json:"properties,omitempty"`
	Assets               map[string]*Asset    `protobuf:"bytes,7,rep,name=assets,proto3" json:"assets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Datetime             *timestamp.Timestamp `protobuf:"bytes,8,opt,name=datetime,proto3" json:"datetime,omitempty"`
	DataObserved         *timestamp.Timestamp `protobuf:"bytes,9,opt,name=data_observed,json=dataObserved,proto3" json:"data_observed,omitempty"`
	DataObservedDuration *duration.Duration   `protobuf:"bytes,10,opt,name=data_observed_duration,json=dataObservedDuration,proto3" json:"data_observed_duration,omitempty"`
	MetadataUpdated      *timestamp.Timestamp `protobuf:"bytes,11,opt,name=metadata_updated,json=metadataUpdated,proto3" json:"metadata_updated,omitempty"`
	DataProcessed        *timestamp.Timestamp `protobuf:"bytes,12,opt,name=data_processed,json=dataProcessed,proto3" json:"data_processed,omitempty"`
	EoProperties         *EOProperties        `protobuf:"bytes,13,opt,name=eo_properties,json=eoProperties,proto3" json:"eo_properties,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *StacMetadata) Reset()         { *m = StacMetadata{} }
func (m *StacMetadata) String() string { return proto.CompactTextString(m) }
func (*StacMetadata) ProtoMessage()    {}
func (*StacMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_stac_52cae837e688895f, []int{4}
}
func (m *StacMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StacMetadata.Unmarshal(m, b)
}
func (m *StacMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StacMetadata.Marshal(b, m, deterministic)
}
func (dst *StacMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StacMetadata.Merge(dst, src)
}
func (m *StacMetadata) XXX_Size() int {
	return xxx_messageInfo_StacMetadata.Size(m)
}
func (m *StacMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_StacMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_StacMetadata proto.InternalMessageInfo

func (m *StacMetadata) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StacMetadata) GetGeometry() *GeometryData {
	if m != nil {
		return m.Geometry
	}
	return nil
}

func (m *StacMetadata) GetBbox() *EnvelopeData {
	if m != nil {
		return m.Bbox
	}
	return nil
}

func (m *StacMetadata) GetProperties() *any.Any {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *StacMetadata) GetAssets() map[string]*Asset {
	if m != nil {
		return m.Assets
	}
	return nil
}

func (m *StacMetadata) GetDatetime() *timestamp.Timestamp {
	if m != nil {
		return m.Datetime
	}
	return nil
}

func (m *StacMetadata) GetDataObserved() *timestamp.Timestamp {
	if m != nil {
		return m.DataObserved
	}
	return nil
}

func (m *StacMetadata) GetDataObservedDuration() *duration.Duration {
	if m != nil {
		return m.DataObservedDuration
	}
	return nil
}

func (m *StacMetadata) GetMetadataUpdated() *timestamp.Timestamp {
	if m != nil {
		return m.MetadataUpdated
	}
	return nil
}

func (m *StacMetadata) GetDataProcessed() *timestamp.Timestamp {
	if m != nil {
		return m.DataProcessed
	}
	return nil
}

func (m *StacMetadata) GetEoProperties() *EOProperties {
	if m != nil {
		return m.EoProperties
	}
	return nil
}

type StacInsertResponse struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	StatusCode           int32    `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	ResultId             string   `protobuf:"bytes,3,opt,name=result_id,json=resultId,proto3" json:"result_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StacInsertResponse) Reset()         { *m = StacInsertResponse{} }
func (m *StacInsertResponse) String() string { return proto.CompactTextString(m) }
func (*StacInsertResponse) ProtoMessage()    {}
func (*StacInsertResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_stac_52cae837e688895f, []int{5}
}
func (m *StacInsertResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StacInsertResponse.Unmarshal(m, b)
}
func (m *StacInsertResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StacInsertResponse.Marshal(b, m, deterministic)
}
func (dst *StacInsertResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StacInsertResponse.Merge(dst, src)
}
func (m *StacInsertResponse) XXX_Size() int {
	return xxx_messageInfo_StacInsertResponse.Size(m)
}
func (m *StacInsertResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StacInsertResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StacInsertResponse proto.InternalMessageInfo

func (m *StacInsertResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *StacInsertResponse) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *StacInsertResponse) GetResultId() string {
	if m != nil {
		return m.ResultId
	}
	return ""
}

type EOProperties struct {
	EoEpsg       uint32        `protobuf:"varint,1,opt,name=eo_epsg,json=eoEpsg,proto3" json:"eo_epsg,omitempty"`
	EoPlatform   EO_PLATFORM   `protobuf:"varint,2,opt,name=eo_platform,json=eoPlatform,proto3,enum=epl.protobuf.EO_PLATFORM" json:"eo_platform,omitempty"`
	EoInstrument EO_INSTRUMENT `protobuf:"varint,3,opt,name=eo_instrument,json=eoInstrument,proto3,enum=epl.protobuf.EO_INSTRUMENT" json:"eo_instrument,omitempty"`
	// Difference from current STAC definition: properties are not nested beneath a properties object
	EoSunAzimuth   *wrappers.FloatValue `protobuf:"bytes,4,opt,name=eo_sun_azimuth,json=eoSunAzimuth,proto3" json:"eo_sun_azimuth,omitempty"`
	EoSunElevation *wrappers.FloatValue `protobuf:"bytes,5,opt,name=eo_sun_elevation,json=eoSunElevation,proto3" json:"eo_sun_elevation,omitempty"`
	EoGsd          *wrappers.FloatValue `protobuf:"bytes,6,opt,name=eo_gsd,json=eoGsd,proto3" json:"eo_gsd,omitempty"`
	EoOffNadir     *wrappers.FloatValue `protobuf:"bytes,7,opt,name=eo_off_nadir,json=eoOffNadir,proto3" json:"eo_off_nadir,omitempty"`
	EoAzimuth      *wrappers.FloatValue `protobuf:"bytes,8,opt,name=eo_azimuth,json=eoAzimuth,proto3" json:"eo_azimuth,omitempty"`
	EoCloudCover   *wrappers.FloatValue `protobuf:"bytes,9,opt,name=eo_cloud_cover,json=eoCloudCover,proto3" json:"eo_cloud_cover,omitempty"`
	// Difference from current STAC definition: bands are just the enums instead of the bandDetails
	// STAC has bands defined twice. once in assets and once in properties. should probably just be
	// once.
	EoBands              EO_BAND  `protobuf:"varint,10,opt,name=eo_bands,json=eoBands,proto3,enum=epl.protobuf.EO_BAND" json:"eo_bands,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EOProperties) Reset()         { *m = EOProperties{} }
func (m *EOProperties) String() string { return proto.CompactTextString(m) }
func (*EOProperties) ProtoMessage()    {}
func (*EOProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_stac_52cae837e688895f, []int{6}
}
func (m *EOProperties) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EOProperties.Unmarshal(m, b)
}
func (m *EOProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EOProperties.Marshal(b, m, deterministic)
}
func (dst *EOProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EOProperties.Merge(dst, src)
}
func (m *EOProperties) XXX_Size() int {
	return xxx_messageInfo_EOProperties.Size(m)
}
func (m *EOProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_EOProperties.DiscardUnknown(m)
}

var xxx_messageInfo_EOProperties proto.InternalMessageInfo

func (m *EOProperties) GetEoEpsg() uint32 {
	if m != nil {
		return m.EoEpsg
	}
	return 0
}

func (m *EOProperties) GetEoPlatform() EO_PLATFORM {
	if m != nil {
		return m.EoPlatform
	}
	return EO_PLATFORM_UNKNOWN_PLATFORM
}

func (m *EOProperties) GetEoInstrument() EO_INSTRUMENT {
	if m != nil {
		return m.EoInstrument
	}
	return EO_INSTRUMENT_UNKNOWN_INSTRUMENT
}

func (m *EOProperties) GetEoSunAzimuth() *wrappers.FloatValue {
	if m != nil {
		return m.EoSunAzimuth
	}
	return nil
}

func (m *EOProperties) GetEoSunElevation() *wrappers.FloatValue {
	if m != nil {
		return m.EoSunElevation
	}
	return nil
}

func (m *EOProperties) GetEoGsd() *wrappers.FloatValue {
	if m != nil {
		return m.EoGsd
	}
	return nil
}

func (m *EOProperties) GetEoOffNadir() *wrappers.FloatValue {
	if m != nil {
		return m.EoOffNadir
	}
	return nil
}

func (m *EOProperties) GetEoAzimuth() *wrappers.FloatValue {
	if m != nil {
		return m.EoAzimuth
	}
	return nil
}

func (m *EOProperties) GetEoCloudCover() *wrappers.FloatValue {
	if m != nil {
		return m.EoCloudCover
	}
	return nil
}

func (m *EOProperties) GetEoBands() EO_BAND {
	if m != nil {
		return m.EoBands
	}
	return EO_BAND_UNKNOWN_BAND
}

func init() {
	proto.RegisterType((*StacSearchRequest)(nil), "epl.protobuf.StacSearchRequest")
	proto.RegisterType((*EORequest)(nil), "epl.protobuf.EORequest")
	proto.RegisterType((*BandDetails)(nil), "epl.protobuf.BandDetails")
	proto.RegisterType((*Asset)(nil), "epl.protobuf.Asset")
	proto.RegisterType((*StacMetadata)(nil), "epl.protobuf.StacMetadata")
	proto.RegisterMapType((map[string]*Asset)(nil), "epl.protobuf.StacMetadata.AssetsEntry")
	proto.RegisterType((*StacInsertResponse)(nil), "epl.protobuf.StacInsertResponse")
	proto.RegisterType((*EOProperties)(nil), "epl.protobuf.EOProperties")
	proto.RegisterEnum("epl.protobuf.EO_PLATFORM", EO_PLATFORM_name, EO_PLATFORM_value)
	proto.RegisterEnum("epl.protobuf.EO_INSTRUMENT", EO_INSTRUMENT_name, EO_INSTRUMENT_value)
	proto.RegisterEnum("epl.protobuf.EO_BAND", EO_BAND_name, EO_BAND_value)
	proto.RegisterEnum("epl.protobuf.ASSET_TYPE", ASSET_TYPE_name, ASSET_TYPE_value)
	proto.RegisterEnum("epl.protobuf.IAAS", IAAS_name, IAAS_value)
}

func init() { proto.RegisterFile("epl/protobuf/stac.proto", fileDescriptor_stac_52cae837e688895f) }

var fileDescriptor_stac_52cae837e688895f = []byte{
	// 1695 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0xcd, 0x72, 0xe3, 0xc6,
	0x11, 0x16, 0x7f, 0x05, 0x36, 0x29, 0x2e, 0x34, 0x2b, 0xef, 0x62, 0x77, 0xed, 0x58, 0x51, 0xaa,
	0x12, 0x59, 0x29, 0x4b, 0x31, 0x93, 0xac, 0xb7, 0xb6, 0x36, 0xb6, 0x41, 0x0a, 0x92, 0xa8, 0x48,
	0x24, 0x6b, 0x48, 0x45, 0x8e, 0x2f, 0xa8, 0x11, 0x30, 0xa4, 0x10, 0x83, 0x18, 0x18, 0x18, 0x68,
	0x57, 0x39, 0xe9, 0x96, 0xf7, 0xc8, 0x25, 0x95, 0x47, 0xd9, 0x5c, 0x73, 0xcb, 0x31, 0x6f, 0x90,
	0xaa, 0x3c, 0x40, 0x6a, 0x06, 0x03, 0xfe, 0x49, 0x1b, 0xd2, 0xb7, 0x99, 0xee, 0xef, 0xeb, 0x99,
	0xe9, 0x6e, 0x74, 0x37, 0xe0, 0x29, 0x0d, 0xfd, 0x83, 0x30, 0x62, 0x9c, 0x5d, 0x25, 0xc3, 0x83,
	0x98, 0x13, 0x67, 0x5f, 0xee, 0x50, 0x8d, 0x86, 0xfe, 0x7e, 0xa6, 0x78, 0xfe, 0xe9, 0x88, 0xb1,
	0x91, 0x4f, 0xa7, 0x48, 0xee, 0x8d, 0x69, 0xcc, 0xc9, 0x38, 0x4c, 0x31, 0xcf, 0x7f, 0xb2, 0x08,
	0x70, 0x93, 0x88, 0x70, 0x8f, 0x05, 0x1f, 0xd2, 0xbf, 0x8d, 0x48, 0x18, 0xd2, 0x28, 0x56, 0xfa,
	0x67, 0x8b, 0x7a, 0x12, 0xdc, 0x2a, 0xd5, 0x8b, 0xb9, 0x2b, 0x8e, 0x28, 0x1b, 0x53, 0x1e, 0x65,
	0x4a, 0x63, 0x4e, 0xf9, 0x43, 0x42, 0x33, 0xcd, 0xce, 0xbf, 0x4a, 0xb0, 0xd9, 0xe7, 0xc4, 0xe9,
	0x53, 0x12, 0x39, 0xd7, 0x98, 0xfe, 0x90, 0xd0, 0x98, 0xa3, 0xcf, 0x20, 0xef, 0xb9, 0x46, 0x6e,
	0x3b, 0xb7, 0x5b, 0x6d, 0x3c, 0xdb, 0x9f, 0x7d, 0xe3, 0x7e, 0x9f, 0x47, 0x5e, 0x30, 0x3a, 0xf2,
	0xa8, 0xef, 0xe2, 0xbc, 0xe7, 0xa2, 0x2d, 0x28, 0xf9, 0xde, 0xd8, 0xe3, 0x46, 0x7e, 0x3b, 0xb7,
	0xbb, 0x81, 0xd3, 0x0d, 0x7a, 0x02, 0x65, 0x36, 0x1c, 0xc6, 0x94, 0x1b, 0x85, 0xed, 0xdc, 0x6e,
	0x11, 0xab, 0x1d, 0x6a, 0x01, 0x0a, 0x23, 0x16, 0xd2, 0x88, 0x7b, 0x34, 0xb6, 0xa3, 0xf4, 0x38,
	0x43, 0x93, 0x07, 0x6d, 0xed, 0xa7, 0xaf, 0x9b, 0x9e, 0x65, 0x06, 0xb7, 0x78, 0x73, 0x8a, 0xcf,
	0x6e, 0xf7, 0x12, 0x80, 0xb2, 0x09, 0xb9, 0x22, 0xc9, 0x4f, 0xe7, 0x6f, 0x69, 0x75, 0x15, 0x18,
	0x57, 0x28, 0xcb, 0x78, 0xfb, 0x50, 0xbc, 0xba, 0x62, 0xef, 0x8c, 0xba, 0x64, 0x3c, 0x5f, 0x60,
	0x04, 0x37, 0xd4, 0x67, 0x21, 0x3d, 0x24, 0x9c, 0x60, 0x89, 0x43, 0x2f, 0x41, 0xcb, 0xfc, 0x68,
	0x3c, 0x7a, 0x88, 0x73, 0xac, 0xb4, 0x92, 0x33, 0xc1, 0xa2, 0x13, 0xd0, 0xb3, 0xf5, 0xe4, 0x96,
	0xba, 0xe4, 0x7f, 0xf2, 0x30, 0x3f, 0xbb, 0xeb, 0xa3, 0xd1, 0xbc, 0x00, 0xbd, 0x02, 0xcd, 0x25,
	0x9c, 0x8a, 0x34, 0x32, 0x90, 0xb4, 0xf0, 0xf1, 0xbc, 0x85, 0x41, 0x96, 0x60, 0x69, 0x40, 0x26,
	0x68, 0xc1, 0x64, 0x57, 0x31, 0x8d, 0x6e, 0xa8, 0x6b, 0x3c, 0x5e, 0x85, 0x99, 0xa1, 0xd1, 0x4b,
	0x58, 0x4f, 0x42, 0x61, 0xc7, 0x35, 0xb6, 0x56, 0x20, 0x66, 0x60, 0xf4, 0x35, 0xd4, 0xe2, 0xc8,
	0xb1, 0xbd, 0xf1, 0xc8, 0x16, 0x02, 0xe3, 0x7d, 0x6e, 0x05, 0x36, 0xc4, 0x91, 0xd3, 0x1e, 0x8f,
	0x0e, 0x09, 0xa7, 0xa8, 0x01, 0xe5, 0x24, 0x1e, 0xc5, 0x9e, 0x6b, 0xfc, 0x63, 0x69, 0xe6, 0x29,
	0xe4, 0x69, 0x51, 0x2b, 0xea, 0xe5, 0xd3, 0xa2, 0x56, 0xd6, 0xb5, 0xd3, 0x92, 0xf6, 0x91, 0xfe,
	0x3e, 0x77, 0x5a, 0xd1, 0xfe, 0x5b, 0xd0, 0xef, 0xee, 0xee, 0xee, 0xf2, 0x3b, 0x7f, 0x2b, 0x40,
	0x65, 0x92, 0x09, 0xe8, 0x2b, 0xa8, 0x53, 0x66, 0xc7, 0x49, 0x60, 0x93, 0x3f, 0x7b, 0xe3, 0x84,
	0x5f, 0xab, 0xbc, 0x33, 0xe6, 0x8f, 0x39, 0xf2, 0x19, 0xe1, 0xe9, 0x29, 0x35, 0xca, 0xfa, 0x49,
	0x60, 0xa6, 0x68, 0xd4, 0x04, 0x5d, 0xf1, 0xa9, 0x4f, 0x6f, 0xe4, 0x67, 0xab, 0x92, 0xef, 0xc3,
	0x16, 0xea, 0xd2, 0x82, 0x95, 0xe1, 0xd1, 0x01, 0x94, 0x29, 0xb3, 0x47, 0xb1, 0x6b, 0xc0, 0x12,
	0x66, 0x89, 0xb2, 0xe3, 0xd8, 0x45, 0xaf, 0xa1, 0x46, 0x99, 0xcd, 0x86, 0x43, 0x3b, 0x20, 0xae,
	0x17, 0x19, 0xd5, 0x25, 0x34, 0xa0, 0xac, 0x3b, 0x1c, 0x76, 0x04, 0x16, 0x7d, 0x29, 0xbf, 0x93,
	0xec, 0xb1, 0xb5, 0x25, 0xcc, 0x0a, 0x65, 0xd9, 0x4b, 0x53, 0x4f, 0x39, 0x3e, 0x4b, 0x5c, 0xdb,
	0x61, 0x37, 0x34, 0x32, 0x36, 0x96, 0x7b, 0xaa, 0x25, 0xe0, 0x2d, 0x81, 0x46, 0xbf, 0x02, 0x8d,
	0x32, 0xfb, 0x8a, 0x04, 0x6e, 0x6c, 0x6c, 0x6e, 0xe7, 0x76, 0xeb, 0x8d, 0x8f, 0x16, 0x3f, 0x4f,
	0xbb, 0x69, 0x76, 0x0e, 0xf1, 0x3a, 0x65, 0x4d, 0x81, 0xda, 0xf9, 0x77, 0x1e, 0xaa, 0x62, 0x75,
	0x48, 0x39, 0xf1, 0xfc, 0x18, 0x21, 0x28, 0x06, 0x64, 0x4c, 0x65, 0x09, 0xaa, 0x60, 0xb9, 0x46,
	0x9f, 0x42, 0xd5, 0x61, 0xe3, 0x31, 0x0b, 0x6c, 0xa9, 0xca, 0x4b, 0x15, 0xa4, 0xa2, 0x8e, 0x00,
	0x6c, 0x43, 0xd5, 0xa5, 0xb1, 0x13, 0x79, 0xa1, 0x8c, 0x4d, 0x41, 0x02, 0x66, 0x45, 0xe8, 0x73,
	0x28, 0x08, 0xdf, 0x17, 0xe5, 0x6b, 0x5e, 0xdc, 0xab, 0x37, 0xf2, 0x41, 0x7f, 0x20, 0x7e, 0x42,
	0xb1, 0xc0, 0xa1, 0x2f, 0x41, 0x23, 0x8e, 0x93, 0x44, 0xc4, 0xb9, 0x35, 0x4a, 0xcb, 0x39, 0x13,
	0x30, 0x3a, 0x81, 0x4d, 0x87, 0x06, 0x9c, 0x46, 0xf6, 0x5b, 0x72, 0x43, 0x7d, 0x1a, 0x8c, 0xf8,
	0xb5, 0x51, 0x5e, 0x6e, 0x41, 0x4f, 0x59, 0x97, 0x13, 0x12, 0x3a, 0x85, 0xc7, 0xc3, 0xc4, 0xf7,
	0xed, 0xb7, 0x9e, 0xcb, 0xaf, 0xed, 0x6b, 0xe2, 0x0f, 0xed, 0x31, 0x79, 0x67, 0xac, 0xaf, 0x60,
	0x4b, 0xf0, 0x2e, 0x05, 0xed, 0x84, 0xf8, 0xc3, 0x73, 0xf2, 0x6e, 0xe7, 0xef, 0x79, 0x28, 0x99,
	0xb1, 0x28, 0xc3, 0x08, 0x8a, 0xd7, 0x11, 0x1d, 0x66, 0xee, 0x15, 0x6b, 0x91, 0x2d, 0x44, 0x28,
	0x6d, 0x7e, 0x1b, 0xa6, 0xde, 0xad, 0x2f, 0x06, 0xdc, 0xec, 0xf7, 0xad, 0x81, 0x3d, 0xf8, 0x63,
	0xcf, 0xc2, 0x15, 0x89, 0x1d, 0xdc, 0x86, 0x14, 0xed, 0xc3, 0xba, 0x8a, 0xb6, 0x74, 0xf9, 0x07,
	0x83, 0x5d, 0x4e, 0x83, 0x8d, 0xde, 0x80, 0x7e, 0x95, 0x38, 0xdf, 0x53, 0x6e, 0x7b, 0x84, 0xc4,
	0xf6, 0x35, 0x8b, 0xb9, 0x8c, 0x48, 0xbd, 0x81, 0xe6, 0x89, 0x6d, 0xd3, 0xec, 0xe3, 0x7a, 0x8a,
	0x6d, 0x13, 0x12, 0x9f, 0xb0, 0x98, 0xa3, 0x9f, 0x42, 0x4d, 0xb1, 0xd9, 0xdb, 0x80, 0x46, 0x32,
	0x2e, 0x15, 0x5c, 0x4d, 0x65, 0x5d, 0x21, 0x42, 0x3f, 0x83, 0x0d, 0x05, 0x89, 0xe8, 0x48, 0x64,
	0x42, 0x59, 0x62, 0x14, 0x0f, 0x4b, 0x19, 0xfa, 0x04, 0x60, 0x02, 0x1a, 0x4a, 0x7f, 0x56, 0x70,
	0x25, 0x43, 0x0c, 0x77, 0xfe, 0x53, 0x82, 0x9a, 0xe8, 0x8b, 0xe7, 0x94, 0x13, 0x97, 0x70, 0x82,
	0xea, 0x93, 0x96, 0x58, 0x91, 0x7d, 0x6f, 0xb6, 0x39, 0x14, 0x7e, 0x44, 0x73, 0xc8, 0x9a, 0x50,
	0x71, 0xc5, 0x26, 0xf4, 0x1b, 0x80, 0x69, 0x07, 0x54, 0x59, 0xf8, 0x70, 0xa7, 0x9c, 0xc1, 0xa1,
	0xaf, 0xa0, 0x2c, 0x03, 0x14, 0x1b, 0xeb, 0xdb, 0x85, 0xdd, 0x6a, 0xe3, 0xe7, 0x8b, 0xa5, 0x74,
	0xfa, 0xb2, 0x7d, 0x99, 0x12, 0xb1, 0x15, 0x88, 0xbe, 0xa3, 0x58, 0xe2, 0x75, 0x93, 0xc6, 0xa3,
	0xa9, 0x9b, 0x2e, 0x9e, 0x39, 0x29, 0xe5, 0x33, 0x6d, 0xe7, 0x6b, 0xd8, 0x10, 0x36, 0xed, 0x49,
	0xef, 0xa9, 0x2c, 0x25, 0xd7, 0x04, 0xa1, 0x9b, 0x75, 0x9f, 0x2e, 0x3c, 0x99, 0x33, 0x60, 0x67,
	0x13, 0x92, 0x2a, 0x98, 0xcf, 0xee, 0x59, 0x3a, 0x54, 0x00, 0xbc, 0x35, 0x6b, 0x28, 0x93, 0x22,
	0x0b, 0xf4, 0xb1, 0x7a, 0xa9, 0x9d, 0xf5, 0xb5, 0xea, 0xd2, 0x4b, 0x3d, 0xca, 0x38, 0x17, 0xaa,
	0xbb, 0x99, 0x50, 0x97, 0x26, 0xc2, 0x88, 0x39, 0x34, 0x8e, 0xa9, 0xab, 0xea, 0xe9, 0xff, 0x33,
	0x22, 0x5d, 0xd1, 0xcb, 0x08, 0xc2, 0x37, 0x94, 0xd9, 0x33, 0xc1, 0xdc, 0x78, 0x30, 0x05, 0xba,
	0xbd, 0xe9, 0xc0, 0x53, 0xa3, 0x6c, 0xba, 0x7b, 0xde, 0x81, 0xea, 0x4c, 0xac, 0x90, 0x0e, 0x85,
	0xef, 0xe9, 0xad, 0x4a, 0x49, 0xb1, 0x44, 0x9f, 0x41, 0xe9, 0x46, 0x7c, 0xfb, 0xf2, 0xeb, 0xad,
	0x36, 0x1e, 0x2f, 0x7c, 0xbd, 0x82, 0x8b, 0x53, 0xc4, 0xeb, 0xfc, 0xab, 0x9c, 0x6c, 0x9b, 0xeb,
	0xa7, 0x9a, 0xb6, 0xa5, 0xda, 0xe5, 0x9f, 0x00, 0x89, 0xc4, 0x68, 0x07, 0x31, 0x8d, 0x38, 0xa6,
	0x71, 0xc8, 0x82, 0x98, 0x8a, 0x51, 0x2e, 0xe6, 0x84, 0x27, 0xb1, 0x3a, 0x49, 0xed, 0x44, 0x39,
	0x4e, 0x57, 0xb6, 0xc3, 0xdc, 0xf4, 0xc8, 0x12, 0x86, 0x54, 0xd4, 0x62, 0x2e, 0x45, 0x2f, 0xa0,
	0x12, 0xd1, 0x38, 0xf1, 0xb9, 0xed, 0xb9, 0xaa, 0x18, 0x6b, 0xa9, 0xa0, 0xed, 0xee, 0xfc, 0xb3,
	0x08, 0xb5, 0xd9, 0xa7, 0xa2, 0xa7, 0xb2, 0x8a, 0xd0, 0x30, 0x1e, 0xc9, 0x73, 0x36, 0x44, 0xb9,
	0xb0, 0xc2, 0x78, 0x84, 0x5e, 0x43, 0x55, 0xb8, 0xcd, 0x27, 0x7c, 0xc8, 0xa2, 0xb1, 0x2a, 0x4c,
	0xcf, 0xee, 0x95, 0x98, 0xde, 0x99, 0x39, 0x38, 0xea, 0xe2, 0x73, 0xd1, 0x01, 0x7b, 0x0a, 0x8c,
	0xbe, 0x91, 0x2e, 0xf7, 0x82, 0x98, 0x47, 0xc9, 0x98, 0x06, 0x5c, 0x15, 0xa8, 0x17, 0xf7, 0xd8,
	0xed, 0x4e, 0x7f, 0x80, 0x2f, 0xce, 0xad, 0xce, 0x40, 0xf8, 0xbc, 0x3d, 0x21, 0x88, 0xb8, 0x2f,
	0x0c, 0x0d, 0x2b, 0x34, 0x8f, 0xf9, 0xb9, 0xc1, 0x7a, 0x60, 0x6e, 0x58, 0xa1, 0x9b, 0x2c, 0x8e,
	0x0e, 0x8d, 0xc9, 0xe8, 0xb0, 0x42, 0x23, 0x51, 0xd3, 0xc3, 0xef, 0x16, 0xa6, 0x87, 0x15, 0xda,
	0xc6, 0xec, 0x00, 0xf1, 0x7a, 0x6e, 0x80, 0xd0, 0x96, 0x93, 0x67, 0x66, 0x08, 0xf3, 0xde, 0x0c,
	0x51, 0x59, 0xc9, 0x71, 0x1f, 0x18, 0x23, 0x60, 0x95, 0x31, 0x62, 0xef, 0x0d, 0x54, 0x67, 0x52,
	0x01, 0x6d, 0x81, 0x7e, 0xd1, 0xf9, 0x7d, 0xa7, 0x7b, 0xd9, 0x99, 0xc8, 0xf4, 0x35, 0xb4, 0x01,
	0x95, 0x33, 0xb3, 0x73, 0xd8, 0x37, 0x07, 0xf6, 0x2b, 0x3d, 0x87, 0x34, 0x28, 0x76, 0xcc, 0x76,
	0x4f, 0xcf, 0xef, 0xfd, 0x02, 0x36, 0xe6, 0x52, 0x01, 0x3d, 0x01, 0x94, 0xf1, 0xa7, 0x52, 0x7d,
	0x6d, 0xef, 0x2f, 0x79, 0x58, 0x57, 0x67, 0x23, 0x1d, 0x6a, 0x19, 0x46, 0xec, 0xf5, 0x35, 0x21,
	0x69, 0x75, 0xcd, 0xfe, 0xc0, 0x3c, 0x4b, 0x25, 0x79, 0x71, 0x62, 0xf3, 0xec, 0xc2, 0x4a, 0xb7,
	0x45, 0x54, 0x07, 0x38, 0xc6, 0x96, 0xa5, 0x08, 0x1a, 0xaa, 0x81, 0x86, 0xad, 0xc3, 0x74, 0xa7,
	0x0b, 0x30, 0x3e, 0x6e, 0xca, 0x5d, 0x5f, 0xff, 0x58, 0xdc, 0xa1, 0x63, 0x99, 0xd8, 0x6e, 0x77,
	0x8e, 0xb0, 0x39, 0x81, 0x6d, 0xa3, 0x47, 0x50, 0xc5, 0xc7, 0xcd, 0x36, 0x56, 0xc0, 0x37, 0xe2,
	0xd8, 0xfe, 0x65, 0x1b, 0xdb, 0x5f, 0xbc, 0x4c, 0x21, 0xdf, 0xa0, 0x4d, 0x25, 0x69, 0x34, 0x52,
	0xc9, 0x5d, 0x0e, 0x3d, 0x81, 0xcd, 0x9e, 0xd9, 0x69, 0x9d, 0xe0, 0xee, 0xb9, 0x39, 0x68, 0xb7,
	0x94, 0x3c, 0x8f, 0x74, 0xa8, 0xb6, 0xda, 0x18, 0x5f, 0xf4, 0x95, 0xa4, 0x28, 0xc8, 0x67, 0xd2,
	0xdc, 0x17, 0x4a, 0xa4, 0x4d, 0x45, 0x99, 0x3d, 0x7d, 0xcf, 0x01, 0x98, 0x0e, 0x05, 0x68, 0x13,
	0x36, 0x32, 0x5f, 0x48, 0xa9, 0xbe, 0x26, 0xbc, 0x7b, 0xda, 0xb3, 0x8e, 0xf5, 0x1c, 0xaa, 0xc2,
	0xfa, 0xb1, 0xd5, 0x1d, 0xb4, 0x8f, 0x8e, 0xf4, 0xbc, 0x10, 0x9f, 0x59, 0xb8, 0xa5, 0x17, 0xd0,
	0x3a, 0x14, 0xce, 0xf1, 0x91, 0x5e, 0x14, 0xfa, 0x73, 0x7c, 0x64, 0xb7, 0x0f, 0xbf, 0xd5, 0x4b,
	0xd9, 0xe6, 0xdb, 0xf3, 0x33, 0xbd, 0xbc, 0xf7, 0x5b, 0x28, 0x8a, 0x51, 0x60, 0xd6, 0xd5, 0x62,
	0xaf, 0xaf, 0x09, 0xb2, 0x79, 0xd9, 0xd7, 0x73, 0x62, 0x71, 0xdc, 0xea, 0xe9, 0x79, 0x54, 0x81,
	0x92, 0xf9, 0xdd, 0x05, 0xb6, 0xf4, 0x42, 0xb3, 0x0f, 0xba, 0xc3, 0xc6, 0x73, 0x19, 0xd3, 0xac,
	0x88, 0x02, 0xd7, 0x13, 0xbb, 0x5e, 0xee, 0xbb, 0x5f, 0x8e, 0x3c, 0x7e, 0x9d, 0x5c, 0xed, 0x3b,
	0x6c, 0x2c, 0x7e, 0x98, 0x3f, 0x1f, 0x45, 0xa1, 0x73, 0x40, 0x42, 0xef, 0x60, 0xc4, 0x7c, 0x12,
	0x8c, 0x0e, 0x66, 0x7f, 0x9a, 0xff, 0x9a, 0x2f, 0xf6, 0x07, 0xbd, 0xe6, 0x55, 0x59, 0x0a, 0x7e,
	0xfd, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3c, 0x4f, 0xae, 0x4b, 0x12, 0x10, 0x00, 0x00,
}
